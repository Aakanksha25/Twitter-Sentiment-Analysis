/*----------------------------------------------------------HIVE ANALYSIS ON TWITTER DATA-----------------------------------------------------------*/


/*Drop all the existing tables(if any).*/

drop table tweet;
drop table load_tweets;
drop table tweet_word1;
drop table stopword1;
drop table removeurl;
drop table sentiment1;
drop table spaces1;
drop table word_join9;
drop table load_tweets1;
drop table lowercase;
drop table dictionary;
drop table final1;
drop table final2;


/*Ignore hive reserved keywords*/

SET hive.support.sql11.reserved.keywords=false;

/*Create "tweet" Table*/

CREATE EXTERNAL TABLE tweet (
   id BIGINT,
   created_at STRING,
   source STRING,
   favorited BOOLEAN,
   retweet_count INT,
   retweeted_status STRUCT<
      text:STRING,
      user:STRUCT<screen_name:STRING,name:STRING>>,
   entities STRUCT<
      urls:ARRAY<STRUCT<expanded_url:STRING>>,
      user_mentions:ARRAY<STRUCT<screen_name:STRING,name:STRING>>,
      hashtags:ARRAY<STRUCT<text:STRING>>>,
   text STRING,
   user STRUCT<
      screen_name:STRING,
      name:STRING,
      friends_count:INT,
      followers_count:INT,
      statuses_count:INT,
      verified:BOOLEAN,
      utc_offset:INT,
      time_zone:STRING>,
   in_reply_to_screen_name STRING
) 
ROW FORMAT SERDE 'com.cloudera.hive.serde.JSONSerDe'
LOCATION '/user/flume/tweets';



/*  Create "tweet" Table */

create external table load_tweets1(id BIGINT,text STRING) ROW FORMAT SERDE 'com.cloudera.hive.serde.JSONSerDe' LOCATION '/user/flume/tweets';

select * from load_tweets1;


/* Add Json-serde Jar File */

ADD JAR /usr/local/hive/lib/hive-serdes-1.0-SNAPSHOT.jar;



/* Split the tweets into Array of words using hive function "split" */

create table split_words1 as select id as id,split(text,' ') as words from load_tweets1;

select * frmo split_words1;



/* Use hive function "expolde" which will extract each element from an array and create a new row for each element.*/

create table tweet_word1 as select id as id,word from split_words1 LATERAL VIEW explode(words) w as word;

select * from tweet_word1;



/* Use "stop.txt" dictionary to remove articles from table */

create table stopword1(word string) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t';

LOAD DATA INPATH '/user/dictionary/stop.txt' into TABLE stopword1;


create table word_join9 as select distinct tweet_word1.id,tweet_word1.word from tweet_word1 where tweet_word1.word NOT IN (select stopword1.word from stopword1);



/* Remove URL Link from the table  */

create table removeurl(id BIGINT,word string)row format delimited fields terminated by ',';

insert into removeurl(id,word) select id,word from word_join9 where word not like "https://%";

select * from removeurl;



/* Create UDF program for removing numeric and Special character */

add jar /home/shubham/Desktop/JAR/replaceCharacter.jar;

create temporary function removeChar as 'replaceCharacter';

create table sentiment1(id BIGINT,word string);

insert into sentiment1(id,word) select id,removeChar(word) from removeURL;

select * from sentiment1;



/* Removing NULL Field from the table */

create table spaces1(id BIGINT,word string);

insert into spaces1(id,word) select * from sentiment1 where word != '';

select * from spaces1;



/* Convert data into lower case  */

create table lowercase(id BIGINT,word string);

insert into lowercase(id,word) select  id, LOWER(word) from spaces1;

select * from lowercase;



/* Add "AFINN" dictionary to Calculate sentiments */


create table dictionary(word string,rating int) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t';

LOAD DATA INPATH '/user/dictionary/dictionary.txt' into table dictionary;



/* Now, we will join the tweet_word table and dictionary table so that the rating of the word will be joined with the word.*/

create table final1 as select lowercase.id,lowercase.word,dictionary.rating from lowercase LEFT OUTER JOIN dictionary ON(lowercase.word = 
dictionary.word);

select * from final1;

create table final2 as select * from final1 where rating is not null;

select * from final2;



/*  performing an Average operation on the rating of the words of each tweet so that the average rating of each tweet can be found.*/

select id,AVG(rating) as rating from final2 GROUP BY final2.id order by rating DESC;
